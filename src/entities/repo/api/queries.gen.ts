// @generated THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
import * as Types from '../../../shared/api/models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type RepoListQueryVariables = Types.Exact<{
  login: Types.Scalars['String']['input'];
  last?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  privacy?: Types.InputMaybe<Types.RepositoryPrivacy>;
  lastComment?: Types.InputMaybe<Types.Scalars['Int']['input']>;
}>;


export type RepoListQuery = { readonly user?: { readonly repositories: { readonly totalCount: number, readonly nodes?: ReadonlyArray<{ readonly name: string, readonly stargazerCount: number, readonly url: any, readonly commitComments: { readonly totalCount: number, readonly nodes?: ReadonlyArray<{ readonly createdAt: any } | null> | null } } | null> | null } } | null };


export const RepoListDocument = gql`
    query RepoList($login: String!, $last: Int, $privacy: RepositoryPrivacy, $lastComment: Int) {
  user(login: $login) {
    repositories(last: $last, privacy: $privacy) {
      nodes {
        name
        stargazerCount
        commitComments(last: $lastComment) {
          nodes {
            createdAt
          }
          totalCount
        }
        url
      }
      totalCount
    }
  }
}
    `;

/**
 * __useRepoListQuery__
 *
 * To run a query within a React component, call `useRepoListQuery` and pass it any options that fit your needs.
 * When your component renders, `useRepoListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRepoListQuery({
 *   variables: {
 *      login: // value for 'login'
 *      last: // value for 'last'
 *      privacy: // value for 'privacy'
 *      lastComment: // value for 'lastComment'
 *   },
 * });
 */
export function useRepoListQuery(baseOptions: Apollo.QueryHookOptions<RepoListQuery, RepoListQueryVariables> & ({ variables: RepoListQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<RepoListQuery, RepoListQueryVariables>(RepoListDocument, options);
      }
export function useRepoListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RepoListQuery, RepoListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<RepoListQuery, RepoListQueryVariables>(RepoListDocument, options);
        }
export function useRepoListSuspenseQuery(baseOptions?: Apollo.SuspenseQueryHookOptions<RepoListQuery, RepoListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<RepoListQuery, RepoListQueryVariables>(RepoListDocument, options);
        }
export type RepoListQueryHookResult = ReturnType<typeof useRepoListQuery>;
export type RepoListLazyQueryHookResult = ReturnType<typeof useRepoListLazyQuery>;
export type RepoListSuspenseQueryHookResult = ReturnType<typeof useRepoListSuspenseQuery>;
export type RepoListQueryResult = Apollo.QueryResult<RepoListQuery, RepoListQueryVariables>;